[{"path":"https://docs.ropensci.org/opencv/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Jeroen Ooms Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://docs.ropensci.org/opencv/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jeroen Ooms. Author, maintainer. Jan Wijffels. Author.","code":""},{"path":"https://docs.ropensci.org/opencv/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ooms J, Wijffels J (2024). opencv: Bindings 'OpenCV' Computer Vision Library. R package version 0.4.9001, https://ropensci.r-universe.dev/opencv.","code":"@Manual{,   title = {opencv: Bindings to 'OpenCV' Computer Vision Library},   author = {Jeroen Ooms and Jan Wijffels},   year = {2024},   note = {R package version 0.4.9001},   url = {https://ropensci.r-universe.dev/opencv}, }"},{"path":"https://docs.ropensci.org/opencv/index.html","id":"bindings-to-opencv-computer-vision-library","dir":"","previous_headings":"","what":"Bindings to OpenCV Computer Vision Library","title":"Bindings to OpenCV Computer Vision Library","text":"Experimenting computer vision machine learning R. package exposes available ‘OpenCV’ https://opencv.org/ algorithms, edge, body face detection. can either applied analyze static images, filter live video footage camera device.","code":""},{"path":"https://docs.ropensci.org/opencv/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Bindings to OpenCV Computer Vision Library","text":"Windows MacOS, package can installed directoy CRAN:","code":"install.packages(\"opencv\")"},{"path":"https://docs.ropensci.org/opencv/index.html","id":"install-from-source","dir":"","previous_headings":"Installation","what":"Install from source","title":"Bindings to OpenCV Computer Vision Library","text":"install source MacOS, need install opencv library homebrew: Ubuntu Fedora need libopencv-dev opencv-devel: install R bindings:","code":"brew install opencv sudo apt-get install libopencv-dev install.packages(\"opencv\", type = \"source\")"},{"path":"https://docs.ropensci.org/opencv/index.html","id":"basic-stuff","dir":"","previous_headings":"","what":"Basic stuff:","title":"Bindings to OpenCV Computer Vision Library","text":"Face recognition: get face location data:","code":"unconf <- ocv_read('https://jeroen.github.io/images/unconf18.jpg') faces <- ocv_face(unconf) ocv_write(faces, 'faces.jpg') facemask <- ocv_facemask(unconf) attr(facemask, 'faces')"},{"path":"https://docs.ropensci.org/opencv/index.html","id":"live-webcam-examples","dir":"","previous_headings":"","what":"Live Webcam Examples","title":"Bindings to OpenCV Computer Vision Library","text":"Live face detection: Edge detection:","code":"library(opencv) ocv_video(ocv_face) library(opencv) ocv_video(ocv_edges)"},{"path":"https://docs.ropensci.org/opencv/index.html","id":"combine-with-graphics","dir":"","previous_headings":"","what":"Combine with Graphics","title":"Bindings to OpenCV Computer Vision Library","text":"Replaces background plot: Put face plot:","code":"library(opencv) library(ggplot2)  # get webcam size test <- ocv_picture() bitmap <- ocv_bitmap(test) width <- dim(bitmap)[2] height <- dim(bitmap)[3]  png('bg.png', width = width, height = height) par(ask=FALSE) print(ggplot2::qplot(speed, dist, data = cars, geom = c(\"smooth\", \"point\"))) dev.off() bg <- ocv_read('bg.png') unlink('pg.png') ocv_video(function(input){   mask <- ocv_mog2(input)   return(ocv_copyto(input, bg, mask)) }) # Overlay face filter ocv_video(function(input){   mask <- ocv_facemask(input)   ocv_copyto(input, bg, mask) })"},{"path":"https://docs.ropensci.org/opencv/index.html","id":"live-face-survey","dir":"","previous_headings":"","what":"Live Face Survey","title":"Bindings to OpenCV Computer Vision Library","text":"Go stand left ’re tidier","code":"library(opencv)  # get webcam size test <- ocv_picture() bitmap <- ocv_bitmap(test) width <- dim(bitmap)[2] height <- dim(bitmap)[3]  # generates the plot makeplot <- function(x){   png('bg.png', width = width, height = height, res = 96)   on.exit(unlink('bg.png'))   groups <- seq(0, width, length.out = 4)   left <- rep(\"left\", sum(x < groups[2]))   middle <- rep(\"middle\", sum(x >= groups[2] & x < groups[3]))   right <- rep(\"right\", sum(x >= groups[3]))   f <- factor(c(left, middle, right), levels = c('left', 'middle', 'right'),               labels = c(\"Tidy!\", \"Whatever Works\", \"Base!\"))   color = I(c(\"#F1BB7B\", \"#FD6467\", \"#5B1A18\"))   plot(f, ylim = c(0, 5),        main = \"Are you a tidyer or baser?\", col = color)   dev.off()   ocv_read('bg.png') }  # overlays faces on the plot ocv_video(function(input){   mask <- ocv_facemask(input)   faces <- attr(mask, 'faces')   bg <- makeplot(faces$x)   return(ocv_copyto(input, bg, mask)) })"},{"path":"https://docs.ropensci.org/opencv/reference/ocv_keypoints.html","id":null,"dir":"Reference","previous_headings":"","what":"OpenCV keypoints — ocv_keypoints","title":"OpenCV keypoints — ocv_keypoints","text":"Find key points images","code":""},{"path":"https://docs.ropensci.org/opencv/reference/ocv_keypoints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OpenCV keypoints — ocv_keypoints","text":"","code":"ocv_keypoints(   image,   method = c(\"FAST\", \"Harris\"),   control = ocv_keypoints_options(method, ...),   ... )"},{"path":"https://docs.ropensci.org/opencv/reference/ocv_keypoints.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"OpenCV keypoints — ocv_keypoints","text":"image ocv grayscale image object method type keypoint detection algorithm control list arguments passed algorithm ... arguments passed ocv_keypoints_options","code":""},{"path":"https://docs.ropensci.org/opencv/reference/ocv_keypoints.html","id":"fast-algorithm-arguments","dir":"Reference","previous_headings":"","what":"FAST algorithm arguments","title":"OpenCV keypoints — ocv_keypoints","text":"threshold threshold difference intensity central pixel pixels circle around pixel. nonmaxSuppression true, non-maximum suppression applied detected corners (keypoints). type one three neighborhoods defined paper: TYPE_9_16, TYPE_7_12, TYPE_5_8","code":""},{"path":"https://docs.ropensci.org/opencv/reference/ocv_keypoints.html","id":"harris-algorithm-arguments","dir":"Reference","previous_headings":"","what":"Harris algorithm arguments","title":"OpenCV keypoints — ocv_keypoints","text":"numOctaves number octaves scale-space pyramid corn_thresh threshold Harris cornerness measure DOG_thresh threshold Difference--Gaussians scale selection maxCorners maximum number corners consider num_layers number intermediate scales per octave","code":""},{"path":"https://docs.ropensci.org/opencv/reference/ocv_keypoints.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"OpenCV keypoints — ocv_keypoints","text":"","code":"mona <- ocv_read('https://jeroen.github.io/images/monalisa.jpg') mona <- ocv_resize(mona, width = 320, height = 477)  # FAST-9 pts <- ocv_keypoints(mona, method = \"FAST\", type = \"TYPE_9_16\", threshold = 40) #> Keypoint detection disabled as module xfeatures2d from opencv_contrib is not present. # Harris pts <- ocv_keypoints(mona, method = \"Harris\", maxCorners = 50) #> Keypoint detection disabled as module xfeatures2d from opencv_contrib is not present.  # Convex Hull of points pts <- ocv_chull(pts)  # \\dontshow{ ocv_destroy(mona) # }"},{"path":"https://docs.ropensci.org/opencv/reference/opencv-area.html","id":null,"dir":"Reference","previous_headings":"","what":"OpenCV area manipulation — opencv-area","title":"OpenCV area manipulation — opencv-area","text":"Manipulate image regions","code":""},{"path":"https://docs.ropensci.org/opencv/reference/opencv-area.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OpenCV area manipulation — opencv-area","text":"","code":"ocv_rectangle(image, x = 0L, y = 0L, width, height)  ocv_polygon(image, pts, convex = FALSE, crop = FALSE, color = 255)  ocv_bbox(image, pts)  ocv_chull(pts)"},{"path":"https://docs.ropensci.org/opencv/reference/opencv-area.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"OpenCV area manipulation — opencv-area","text":"image ocv image object x horizontal location y vertical location width width area height height area pts list points elements x y convex points convex crop crop resulting area bounding box color color non-polygon area","code":""},{"path":"https://docs.ropensci.org/opencv/reference/opencv-area.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"OpenCV area manipulation — opencv-area","text":"","code":"mona <- ocv_read('https://jeroen.github.io/images/monalisa.jpg')  # Rectangular area ocv_rectangle(mona, x = 400, y = 300, height = 300, width = 350) #> <pointer: 0x55b66ce401a0> #> attr(,\"class\") #> [1] \"opencv-image\" ocv_rectangle(mona, x = 0, y = 100, height = 200) #> <pointer: 0x55b673ca1480> #> attr(,\"class\") #> [1] \"opencv-image\" ocv_rectangle(mona, x = 500, y = 0, width = 75) #> <pointer: 0x55b66e18d7c0> #> attr(,\"class\") #> [1] \"opencv-image\"  # Polygon area img <- ocv_resize(mona, width = 320, height = 477) pts <- list(x = c(184, 172, 146, 114,  90,  76,  92, 163, 258),             y = c(72,   68,  70,  90, 110, 398, 412, 385, 210)) ocv_polygon(img, pts) #> <pointer: 0x55b6758e3ab0> #> attr(,\"class\") #> [1] \"opencv-image\" ocv_polygon(img, pts, crop = TRUE) #> <pointer: 0x55b66e369650> #> attr(,\"class\") #> [1] \"opencv-image\" ocv_polygon(img, pts, convex = TRUE, crop = TRUE) #> <pointer: 0x55b66d936f30> #> attr(,\"class\") #> [1] \"opencv-image\"  # Bounding box based on points ocv_bbox(img, pts) #> <pointer: 0x55b66efc5240> #> attr(,\"class\") #> [1] \"opencv-image\"  # Bounding box of non-zero pixel area area <- ocv_polygon(img, pts, color = 0, crop = FALSE) area #> <pointer: 0x55b6759b2480> #> attr(,\"class\") #> [1] \"opencv-image\" area <- ocv_bbox(area) area #> <pointer: 0x55b674164e50> #> attr(,\"class\") #> [1] \"opencv-image\"  # \\dontshow{ ocv_destroy(mona) ocv_destroy(img) ocv_destroy(area) # }"},{"path":"https://docs.ropensci.org/opencv/reference/opencv.html","id":null,"dir":"Reference","previous_headings":"","what":"OpenCV Computer Vision — ocv_face","title":"OpenCV Computer Vision — ocv_face","text":"Tools experiment computer vision algorithms. Use ocv_read ocv_write load/save images disk, use ocv_picture / ocv_video use webcam. RSudio IDE image objects automatically displayed viewer pane.","code":""},{"path":"https://docs.ropensci.org/opencv/reference/opencv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OpenCV Computer Vision — ocv_face","text":"","code":"ocv_face(image)  ocv_facemask(image)  ocv_read(path)  ocv_write(image, path)  ocv_destroy(image)  ocv_bitmap(image)  ocv_edges(image)  ocv_picture()  ocv_resize(image, width = 0, height = 0)  ocv_mog2(image)  ocv_knn(image)  ocv_hog(image)  ocv_blur(image, ksize = 5)  ocv_sketch(image, color = TRUE)  ocv_stylize(image)  ocv_markers(image)  ocv_info(image)  ocv_copyto(image, target, mask)  ocv_display(image)  ocv_video(filter, stop_on_result = FALSE)  ocv_grayscale(image)  ocv_version()"},{"path":"https://docs.ropensci.org/opencv/reference/opencv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"OpenCV Computer Vision — ocv_face","text":"image ocv image object created e.g. ocv_read() path image file png jpeg width output width pixels height output height pixels ksize size blurring matrix color true false target output image mask copy pixels mask filter R function takes returns opecv image stop_on_result stop object detected","code":""},{"path":"https://docs.ropensci.org/opencv/reference/opencv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"OpenCV Computer Vision — ocv_face","text":"","code":"# Silly example mona <- ocv_read('https://jeroen.github.io/images/monalisa.jpg')  # Edge detection ocv_edges(mona) #> <pointer: 0x55b6751d0e60> #> attr(,\"class\") #> [1] \"opencv-image\" ocv_markers(mona) #> <pointer: 0x55b66ce3f320> #> attr(,\"class\") #> [1] \"opencv-image\"  # Find face faces <- ocv_face(mona)  # To show locations of faces facemask <- ocv_facemask(mona) attr(facemask, 'faces') #>   radius   x   y #> 1    174 582 478  # This is not strictly needed ocv_destroy(mona)"},{"path":"https://docs.ropensci.org/opencv/reference/qrcode.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect and Decode a QR code — ocv_qr_detect","title":"Detect and Decode a QR code — ocv_qr_detect","text":"Detect decode QR code image camera. default returns text value QR code detected, NULL QR found. draw = TRUE returns annotated image position value QR drawn image, qr text value attribute. qr_scanner function opens camera device (available computer) repeats ocv_qr_detect QR detected.","code":""},{"path":"https://docs.ropensci.org/opencv/reference/qrcode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect and Decode a QR code — ocv_qr_detect","text":"","code":"ocv_qr_detect(image, draw = FALSE, decoder = c(\"wechat\", \"quirc\"))  qr_scanner(draw = FALSE, decoder = c(\"wechat\", \"quirc\"))"},{"path":"https://docs.ropensci.org/opencv/reference/qrcode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect and Decode a QR code — ocv_qr_detect","text":"image ocv image object created e.g. ocv_read() draw TRUE, function returns annotated image showing position value QR code. decoder decoder implementation use, see details.","code":""},{"path":"https://docs.ropensci.org/opencv/reference/qrcode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect and Decode a QR code — ocv_qr_detect","text":"QR code detected, returns either text value QR, draw returns annotated image, value attribute. Returns NULL QR found image.","code":""},{"path":"https://docs.ropensci.org/opencv/reference/qrcode.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Detect and Decode a QR code — ocv_qr_detect","text":"OpenCV two separate QR decoders. 'wechat' decoder added libopencv 4.5.2 generally better performance fault-tolerance. old 'quirc' decoder available older versions libopencv plug-, many Linux distros include . get error Library QUIRC linked. decoding performed. sadly means Linux distribution old support QR decoding.","code":""},{"path":"https://docs.ropensci.org/opencv/reference/qrcode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect and Decode a QR code — ocv_qr_detect","text":"","code":"png(\"test.png\") plot(qrcode::qr_code(\"This is a test\")) dev.off() #> agg_png  #>       2  ocv_qr_detect(ocv_read('test.png')) #> [1] \"This is a test\" #> attr(,\"points\") #>      [,1] [,2] #> [1,]    0    0 #> [2,]  479    0 #> [3,]  479  479 #> [4,]    0  479 unlink(\"test.png\")"},{"path":"https://docs.ropensci.org/opencv/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. magrittr %>%","code":""}]
